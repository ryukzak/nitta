name: Tests

on: [push]

env:
  GH_PAGES_DIR: gh-pages

jobs:

  nitta:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v2

      - name: Cache haskell-stack
        uses: actions/cache@v2.1.3
        with:
          path: ~/.stack
          key: ${{ runner.os }}-haskell-stack-${{ hashFiles('**/stack.yaml', '**/package.yaml') }}

      - name: Install haskell-stack
        uses: haskell/actions/setup@v1.2
        with:
          enable-stack: true
          stack-version: 'latest'

      - name: Build nitta backend dependencies and doctest
        run: |
          stack build --haddock --test --only-dependencies
          stack install doctest

      - name: Install Icarus Verilog
        run: sudo apt-get install iverilog

      - name: Build & test nitta backend
        run: stack build --haddock --no-haddock-deps --test --keep-going --test-suite-timeout 600 --copy-bins --coverage

      - name: Generate test coverage report
        run: stack hpc report nitta

      - name: Check examples by doctest
        run: |
          stack build --fast
          # dirty hack for fix Ambiguous module name ‘Data.String.Interpolate’:
          # it was found in multiple packages: interpolate-0.2.1 string-interpolate-0.3.1.0
          stack exec ghc-pkg unregister interpolate -- --force
          find src -name '*.hs' -exec grep -l '>>>' {} \; | xargs -t -L 1 -P 4 stack exec doctest

      - name: Generate backend API
        run: stack exec nitta-api-gen -- -v

      - name: Cache node_modules
        uses: actions/cache@v2.1.3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Build nitta frontend dependencies
        working-directory: ./web
        run: yarn install

      - name: Build frontend
        working-directory: ./web
        timeout-minutes: 5
        run: yarn build

      - name: Copy doc to GH_PAGES_DIR
        run: |
          mkdir -p "${{ env.GH_PAGES_DIR }}/haddock/"
          cp -r $(stack path --dist-dir)/doc/html/nitta "$_"

      - name: Copy test coverage to GH_PAGES_DIR
        run: cp -r $(stack path --local-hpc-root)/combined/custom ${{ env.GH_PAGES_DIR }}/hpc
      
      - name: Copy API doc to GH_PAGES_DIR
        run: |
          mkdir -p "${{ env.GH_PAGES_DIR }}/rest-api/"
          cp ./web/src/services/gen/rest_api.markdown "$_"

      - name: Copy README.md to GH_PAGES_DIR
        run: cp README.md ${{ env.GH_PAGES_DIR }}/

      - name: Publish generated content to GitHub Pages
        if: ${{ github.ref == 'refs/heads/master'}}
        uses: JamesIves/github-pages-deploy-action@4.1.1
        with:
          folder: ${{ env.GH_PAGES_DIR }}
          branch: gh-pages

  hlint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: 'Set up HLint'
      uses: rwe/actions-hlint-setup@v1

    - name: 'Run HLint'
      uses: rwe/actions-hlint-run@v2
      with:
        path: .
        fail-on: suggestion


  hs-codestyle-by-fourmolu:
    runs-on: ubuntu-latest
    steps:
      - name: Cache haskell-stack and fourmolu
        uses: actions/cache@v2.1.3
        with:
          path: ~/.stack
          key: ${{ runner.os }}-haskell-stack-${{ hashFiles('**/stack.yaml', '**/package.yaml') }}-fourmolu

      - name: Install haskell-stack
        uses: actions/setup-haskell@v1.1.3
        with:
          enable-stack: true

      - name: Install fourmolu
        run: |
          mkdir -p ~/.stack
          touch ~/.stack/config.yaml
          echo 'allow-newer: true' >> ~/.stack/config.yaml
          stack install fourmolu
          echo ~/.local/bin >> $GITHUB_PATH

      - uses: actions/checkout@v2
      - name: Check formating
        run: find . -name '*.hs' | xargs fourmolu -m check


  ui-codestyle-by-prettier:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check ts and tsx code style by prettier
        working-directory: ./web
        run: |
          yarn add -s prettier
          yarn exec -s prettier -- --check src/**/*.{ts,tsx}


  nitta-hdl:
    runs-on: ubuntu-latest
    container: ryukzak/alpine-iverilog
    defaults:
      run:
        shell: sh
    steps:
      - uses: actions/checkout@v2
      - run: |
          make -C hdl > make_hdl.log
          cat make_hdl.log
          test "$(grep -ci error make_hdl.log)" -eq 0
